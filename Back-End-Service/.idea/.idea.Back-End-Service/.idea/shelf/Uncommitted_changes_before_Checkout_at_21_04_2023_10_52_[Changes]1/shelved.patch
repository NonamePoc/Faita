Index: Back-End-Service.Api/Controllers/UserController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Back_End_Service.Identity.Entities;\r\nusing Back_End_Service.Identity.Models;\r\nusing Back_End_Service.Identity.Service;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace Back_End_Service.Controllers;\r\n\r\n[ApiController]\r\n[Authorize]\r\n[Route(Route)]\r\npublic class UsersController : ControllerBase\r\n{\r\n    private readonly IUserService _userService;\r\n    private readonly UserManager<User> _userManager;\r\n    private const string Route = \"api/users\";\r\n\r\n    public UsersController(IUserService userService, UserManager<User> userManager)\r\n    {\r\n        _userManager = userManager;\r\n        _userService = userService;\r\n    }\r\n\r\n\r\n    [AllowAnonymous]\r\n    [HttpPost(\"authenticate\")]\r\n    public async Task<IActionResult> Authenticate(AuthenticateRequest model)\r\n    {\r\n        var response = await _userService.Authenticate(model);\r\n\r\n\r\n        return Ok(response);\r\n    }\r\n\r\n    [Authorize]\r\n    [HttpGet(\"logout\")]\r\n    public async Task<IActionResult> Logout()\r\n    {\r\n        var user = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n\r\n        await _userService.Logout(user);\r\n        return Ok();\r\n    }\r\n\r\n    [AllowAnonymous]\r\n    [HttpPost(\"register\")]\r\n    public async Task<IActionResult> Register(UserModel userModel)\r\n    {\r\n        await _userService.Register(userModel,\r\n            Url.Action(nameof(ConfirmEmail), \"Users\", null, HttpContext.Request.Scheme) ?? string.Empty);\r\n\r\n        return Ok();\r\n    }\r\n\r\n\r\n    [AllowAnonymous]\r\n    [HttpGet(\"confirm-email\")]\r\n    public async Task<IActionResult> ConfirmEmail(string userId, string token)\r\n    {\r\n        var user = await _userManager.FindByIdAsync(userId);\r\n        if (user == null)\r\n        {\r\n            return BadRequest(new { message = \"User not found.\" });\r\n        }\r\n\r\n        if (user.EmailConfirmed)\r\n        {\r\n            return BadRequest(new { message = \"Email already confirmed.\" });\r\n        }\r\n\r\n        var validToken = token.Replace(\" \", \"+\");\r\n        var result = await _userManager.ConfirmEmailAsync(user, validToken);\r\n        if (!result.Succeeded)\r\n        {\r\n            return BadRequest(new { message = \"Failed to confirm email.\" });\r\n        }\r\n\r\n        return Ok();\r\n    }\r\n\r\n    [AllowAnonymous]\r\n    [HttpPut(\"change-password\")]\r\n    public async Task<IActionResult> ChangePassword(ChangePassword changePassword)\r\n    {\r\n        var user = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n        if (user == null)\r\n        {\r\n            return BadRequest(new { message = \"User not found.\" });\r\n        }\r\n\r\n        await _userService.ChangePasswordAsync(changePassword,\r\n            Url.Action(nameof(ChangePassword), \"Users\", null, HttpContext.Request.Scheme) ?? string.Empty,\r\n            await _userManager.FindByIdAsync(user));\r\n        return Ok();\r\n    }\r\n\r\n    [AllowAnonymous]\r\n    [HttpGet(\"change-email\")]\r\n    public async Task<IActionResult> ChangeEmail([FromQuery] ChangeEmail modelEmail)\r\n    {\r\n        await _userService.ChangeEmailAsync(modelEmail);\r\n\r\n        return Ok();\r\n    }\r\n\r\n    [Authorize]\r\n    [HttpPut(\"change-email\")]\r\n    public async Task<IActionResult> SendRequestChangeEmail(SendChangeEmail changeEmail)\r\n    {\r\n        var user = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n\r\n\r\n        await _userService.SendRequestChangeEmailAsync(changeEmail,\r\n            Url.Action(nameof(ChangeEmail), \"Users\", null, HttpContext.Request.Scheme) ?? string.Empty,\r\n            await _userManager.FindByIdAsync(user));\r\n\r\n        return Ok();\r\n    }\r\n\r\n\r\n    [Authorize]\r\n    [HttpPut(\"change-user-data\")]\r\n    public async Task<IActionResult> ChangeUserData(ChangeUserData changeUserData)\r\n    {\r\n        var user = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n        if (user == null)\r\n        {\r\n            return BadRequest(new { message = \"User not found.\" });\r\n        }\r\n\r\n        await _userService.ChangeUserDataAsync(changeUserData, await _userManager.FindByIdAsync(user));\r\n        return Ok();\r\n    }\r\n\r\n\r\n    [Authorize]\r\n    [HttpGet(\"get-user-id\")]\r\n    public async Task<IActionResult> GetUserId()\r\n    {\r\n        var user = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n        if (user == null)\r\n        {\r\n            return BadRequest(new { message = \"User not found.\" });\r\n        }\r\n\r\n        await _userService.GetUserId(user);\r\n        return Ok();\r\n    }\r\n\r\n    [AllowAnonymous]\r\n    [HttpPost(\"SearchUser\")]\r\n    public async Task<IActionResult> SearchUser(SearchUser searchUser)\r\n    {\r\n        var users = await _userManager.Users\r\n            .Where(u => u.UserName.Contains(searchUser.UserName))\r\n            .ToListAsync();\r\n\r\n        return Ok(users);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Api/Controllers/UserController.cs b/Back-End-Service.Api/Controllers/UserController.cs
--- a/Back-End-Service.Api/Controllers/UserController.cs	
+++ b/Back-End-Service.Api/Controllers/UserController.cs	
@@ -34,15 +34,6 @@
         return Ok(response);
     }
 
-    [Authorize]
-    [HttpGet("logout")]
-    public async Task<IActionResult> Logout()
-    {
-        var user = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
-
-        await _userService.Logout(user);
-        return Ok();
-    }
 
     [AllowAnonymous]
     [HttpPost("register")]
@@ -82,7 +73,7 @@
 
     [AllowAnonymous]
     [HttpPut("change-password")]
-    public async Task<IActionResult> ChangePassword(ChangePassword changePassword)
+    public async Task<IActionResult> ChangePassword(ChangePasswordModel changePasswordModel)
     {
         var user = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
         if (user == null)
@@ -90,7 +81,7 @@
             return BadRequest(new { message = "User not found." });
         }
 
-        await _userService.ChangePasswordAsync(changePassword,
+        await _userService.ChangePasswordAsync(changePasswordModel,
             Url.Action(nameof(ChangePassword), "Users", null, HttpContext.Request.Scheme) ?? string.Empty,
             await _userManager.FindByIdAsync(user));
         return Ok();
@@ -98,21 +89,21 @@
 
     [AllowAnonymous]
     [HttpGet("change-email")]
-    public async Task<IActionResult> ChangeEmail([FromQuery] ChangeEmail modelEmail)
+    public async Task<IActionResult> ChangeEmail([FromQuery] ChangeEmailModel modelEmailModel)
     {
-        await _userService.ChangeEmailAsync(modelEmail);
+        await _userService.ChangeEmailAsync(modelEmailModel);
 
         return Ok();
     }
 
     [Authorize]
     [HttpPut("change-email")]
-    public async Task<IActionResult> SendRequestChangeEmail(SendChangeEmail changeEmail)
+    public async Task<IActionResult> SendRequestChangeEmail(SendChangeEmailModel changeEmailModel)
     {
         var user = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
 
 
-        await _userService.SendRequestChangeEmailAsync(changeEmail,
+        await _userService.SendRequestChangeEmailAsync(changeEmailModel,
             Url.Action(nameof(ChangeEmail), "Users", null, HttpContext.Request.Scheme) ?? string.Empty,
             await _userManager.FindByIdAsync(user));
 
@@ -122,7 +113,7 @@
 
     [Authorize]
     [HttpPut("change-user-data")]
-    public async Task<IActionResult> ChangeUserData(ChangeUserData changeUserData)
+    public async Task<IActionResult> ChangeUserData(ChangeUserDataModel changeUserDataModel)
     {
         var user = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
         if (user == null)
@@ -130,7 +121,7 @@
             return BadRequest(new { message = "User not found." });
         }
 
-        await _userService.ChangeUserDataAsync(changeUserData, await _userManager.FindByIdAsync(user));
+        await _userService.ChangeUserDataAsync(changeUserDataModel, await _userManager.FindByIdAsync(user));
         return Ok();
     }
 
@@ -151,12 +142,26 @@
 
     [AllowAnonymous]
     [HttpPost("SearchUser")]
-    public async Task<IActionResult> SearchUser(SearchUser searchUser)
+    public async Task<IActionResult> SearchUser(SearchUserModel searchUserModel)
     {
         var users = await _userManager.Users
-            .Where(u => u.UserName.Contains(searchUser.UserName))
+            .Where(u => u.FirstName.Contains(searchUserModel.UserName))
             .ToListAsync();
 
         return Ok(users);
     }
+
+    [Authorize]
+    [HttpPost("add-avatar")]
+    public async Task<IActionResult> AddAvatar(AddAvatarModel addAvatar)
+    {
+        var user = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
+        if (user == null)
+        {
+            return BadRequest(new { message = "User not found." });
+        }
+
+        await _userService.AddAvatarAsync(addAvatar, await _userManager.FindByIdAsync(user));
+        return Ok();
+    }
 }
\ No newline at end of file
Index: Back-End-Service.Identity/Service/IUserService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Security.Principal;\r\nusing System.Threading.Tasks;\r\nusing Back_End_Service.Identity.Entities;\r\nusing Back_End_Service.Identity.Models;\r\n\r\n\r\nnamespace Back_End_Service.Identity.Service;\r\n\r\npublic interface IUserService\r\n{\r\n    Task<AuthenticateResponse> Authenticate(AuthenticateRequest model);\r\n    Task Register(UserModel userModel, string? route);\r\n    \r\n    Task Logout(string userid);\r\n\r\n    Task ChangePasswordAsync(ChangePassword changePassword, string route, User user);\r\n    \r\n    Task ChangeEmailAsync(ChangeEmail changeEmail);\r\n\r\n    Task SendRequestChangeEmailAsync(SendChangeEmail changeEmail, string route, User user);\r\n    \r\n    Task ChangeUserDataAsync(ChangeUserData changeUserData, User user);\r\n    \r\n    \r\n    Task GetUserId(string userId);\r\n    \r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Service/IUserService.cs b/Back-End-Service.Identity/Service/IUserService.cs
--- a/Back-End-Service.Identity/Service/IUserService.cs	
+++ b/Back-End-Service.Identity/Service/IUserService.cs	
@@ -10,18 +10,18 @@
 {
     Task<AuthenticateResponse> Authenticate(AuthenticateRequest model);
     Task Register(UserModel userModel, string? route);
-    
-    Task Logout(string userid);
+
 
-    Task ChangePasswordAsync(ChangePassword changePassword, string route, User user);
-    
-    Task ChangeEmailAsync(ChangeEmail changeEmail);
+    Task ChangePasswordAsync(ChangePasswordModel changePasswordModel, string route, User user);
+
+    Task ChangeEmailAsync(ChangeEmailModel changeEmailModel);
 
-    Task SendRequestChangeEmailAsync(SendChangeEmail changeEmail, string route, User user);
-    
-    Task ChangeUserDataAsync(ChangeUserData changeUserData, User user);
-    
-    
+    Task SendRequestChangeEmailAsync(SendChangeEmailModel changeEmailModel, string route, User user);
+
+    Task ChangeUserDataAsync(ChangeUserDataModel changeUserDataModel, User user);
+
+
+    Task AddAvatarAsync(AddAvatarModel addAvatar, User user);
+
     Task GetUserId(string userId);
-    
 }
\ No newline at end of file
Index: Back-End-Service.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Back-End-Service.Api\", \"Back-End-Service.Api\\Back-End-Service.Api.csproj\", \"{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Back-End-Service.Identity\", \"Back-End-Service.Identity\\Back-End-Service.Identity.csproj\", \"{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Back-End-Service.Chat\", \"Back-End-Service.Chat\\Back-End-Service.Chat.csproj\", \"{0EFB87E0-E141-4865-B928-9AB776902367}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Back-End-Service.Post\", \"Back-End-Service.Post\\Back-End-Service.Post.csproj\", \"{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{0EFB87E0-E141-4865-B928-9AB776902367}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{0EFB87E0-E141-4865-B928-9AB776902367}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{0EFB87E0-E141-4865-B928-9AB776902367}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{0EFB87E0-E141-4865-B928-9AB776902367}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\nEndGlobal\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.sln b/Back-End-Service.sln
--- a/Back-End-Service.sln	
+++ b/Back-End-Service.sln	
@@ -1,12 +1,15 @@
 
 Microsoft Visual Studio Solution File, Format Version 12.00
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Back-End-Service.Api", "Back-End-Service.Api\Back-End-Service.Api.csproj", "{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}"
+# Visual Studio Version 17
+VisualStudioVersion = 17.5.33414.496
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Back-End-Service.Api", "Back-End-Service.Api\Back-End-Service.Api.csproj", "{7583845D-8681-4E85-9ADF-BEE7B05D4C6E}"
 EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Back-End-Service.Identity", "Back-End-Service.Identity\Back-End-Service.Identity.csproj", "{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}"
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Back-End-Service.Identity", "Back-End-Service.Identity\Back-End-Service.Identity.csproj", "{6EA71FD1-B5A9-49D7-A422-BF80ADE820B0}"
 EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Back-End-Service.Chat", "Back-End-Service.Chat\Back-End-Service.Chat.csproj", "{0EFB87E0-E141-4865-B928-9AB776902367}"
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Back-End-Service.Chat", "Back-End-Service.Chat\Back-End-Service.Chat.csproj", "{0EFB87E0-E141-4865-B928-9AB776902367}"
 EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Back-End-Service.Post", "Back-End-Service.Post\Back-End-Service.Post.csproj", "{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}"
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Back-End-Service.Publication", "Back-End-Service.Post\Back-End-Service.Publication.csproj", "{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}"
 EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
@@ -30,5 +33,8 @@
 		{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{4E7D7EB0-9B9B-4426-ACEB-0F895D405775}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
 	EndGlobalSection
 EndGlobal
Index: Back-End-Service.Post/Model/AddCommentModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/AddCommentModel.cs b/Back-End-Service.Post/Model/AddCommentModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/AddCommentModel.cs	
@@ -0,0 +1,3 @@
+public class AddCommentModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Api/Back-End-Service.Api.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net6.0</TargetFramework>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <RootNamespace>Back_End_Service</RootNamespace>\r\n        <DockerDefaultTargetOS>Windows</DockerDefaultTargetOS>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\r\n        <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.0\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"6.0.15\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Cryptography.KeyDerivation\" Version=\"8.0.0-preview.2.23153.2\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.DataProtection\" Version=\"7.0.3\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.2.0\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Abstractions\" Version=\"2.2.0\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"6.0.15\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Abstractions\" Version=\"2.2.0\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.2.5\" />\r\n        <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"7.0.3\">\r\n          <PrivateAssets>all</PrivateAssets>\r\n          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n        </PackageReference>\r\n        <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"7.0.3\" />\r\n        <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"8.0.0-preview.2.23128.3\" />\r\n        <PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"8.0.0-preview.2.23128.3\" />\r\n        <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\r\n        <PackageReference Include=\"Swashbuckle.AspNetCore.Swagger\" Version=\"6.5.0\" />\r\n        <PackageReference Include=\"Swashbuckle.AspNetCore.SwaggerGen\" Version=\"6.5.0\" />\r\n        <PackageReference Include=\"Swashbuckle.AspNetCore.SwaggerUI\" Version=\"6.5.0\" />\r\n        <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"6.27.0\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <Content Include=\"..\\.dockerignore\">\r\n        <Link>.dockerignore</Link>\r\n      </Content>\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <ProjectReference Include=\"..\\Back-End-Service.Chat\\Back-End-Service.Chat.csproj\" />\r\n      <ProjectReference Include=\"..\\Back-End-Service.Identity\\Back-End-Service.Identity.csproj\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Api/Back-End-Service.Api.csproj b/Back-End-Service.Api/Back-End-Service.Api.csproj
--- a/Back-End-Service.Api/Back-End-Service.Api.csproj	
+++ b/Back-End-Service.Api/Back-End-Service.Api.csproj	
@@ -41,6 +41,7 @@
     <ItemGroup>
       <ProjectReference Include="..\Back-End-Service.Chat\Back-End-Service.Chat.csproj" />
       <ProjectReference Include="..\Back-End-Service.Identity\Back-End-Service.Identity.csproj" />
+      <ProjectReference Include="..\Back-End-Service.Post\Back-End-Service.Publication.csproj" />
     </ItemGroup>
 
 </Project>
Index: .idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"EfCoreCommonOptions\">\r\n    <option name=\"migrationsToStartupProjects\">\r\n      <map>\r\n        <entry key=\"6ea71fd1-b5a9-49d7-a422-bf80ade820b0\" value=\"6ea71fd1-b5a9-49d7-a422-bf80ade820b0\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"solutionLevelOptions\">\r\n      <map>\r\n        <entry key=\"migrationsProject\" value=\"6ea71fd1-b5a9-49d7-a422-bf80ade820b0\" />\r\n        <entry key=\"startupProject\" value=\"7583845d-8681-4e85-9adf-bee7b05d4c6e\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"startupToMigrationsProjects\">\r\n      <map>\r\n        <entry key=\"6ea71fd1-b5a9-49d7-a422-bf80ade820b0\" value=\"6ea71fd1-b5a9-49d7-a422-bf80ade820b0\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml b/.idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml
--- a/.idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml	
+++ b/.idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml	
@@ -3,7 +3,7 @@
   <component name="EfCoreCommonOptions">
     <option name="migrationsToStartupProjects">
       <map>
-        <entry key="6ea71fd1-b5a9-49d7-a422-bf80ade820b0" value="6ea71fd1-b5a9-49d7-a422-bf80ade820b0" />
+        <entry key="6ea71fd1-b5a9-49d7-a422-bf80ade820b0" value="7583845d-8681-4e85-9adf-bee7b05d4c6e" />
       </map>
     </option>
     <option name="solutionLevelOptions">
@@ -15,6 +15,7 @@
     <option name="startupToMigrationsProjects">
       <map>
         <entry key="6ea71fd1-b5a9-49d7-a422-bf80ade820b0" value="6ea71fd1-b5a9-49d7-a422-bf80ade820b0" />
+        <entry key="7583845d-8681-4e85-9adf-bee7b05d4c6e" value="6ea71fd1-b5a9-49d7-a422-bf80ade820b0" />
       </map>
     </option>
   </component>
Index: Back-End-Service.Post/Service/PostService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Service/PostService.cs b/Back-End-Service.Post/Service/PostService.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Service/PostService.cs	
@@ -0,0 +1,150 @@
+using Back_End_Service.Identity.Context;
+using Back_End_Service.Identity.Entities;
+using Microsoft.AspNetCore.Identity;
+
+namespace Back_End_Service.Post.Service;
+
+public class PostService : IPostService
+{
+    private readonly UserManager<User> _userManager;
+
+    private readonly DataContext _context;
+
+    public PostService(UserManager<User> userManager, DataContext context)
+    {
+        _userManager = userManager;
+        _context = context;
+    }
+
+    public async Task<Posts> CreatePost(CreatePostModel model)
+    {
+        var post = new Posts
+        {
+            Id = Guid.NewGuid().ToString(),
+            Title = model.Title,
+            Content = model.Content,
+            ImageUrl = model.ImageUrl,
+            VideoUrl = model.VideoUrl,
+            AudioUrl = model.AudioUrl,
+            CreatedAt = DateTime.Now,
+            UserId = model.UserId
+        };
+
+        _context.Post.Add(post);
+        await _context.SaveChangesAsync();
+
+        return post;
+    }
+
+    public async Task RepostPost(RepostPostModel model)
+    {
+        var repost = new Repost
+        {
+            Id = Guid.NewGuid().ToString(),
+            PostId = model.PostId,
+            UserId = model.UserId,
+        };
+
+        _context.Repost.Add(repost);
+        await _context.SaveChangesAsync();
+    }
+
+    public async Task DeletePost(DeletePostModel model)
+    {
+        var post = _context.Post.FirstOrDefault(x => x.Id == model.PostId);
+
+        if (post == null)
+        {
+            throw new Exception("Post not found");
+        }
+
+        _context.Post.Remove(post);
+        _context.SaveChanges();
+    }
+
+    public Task EditPost(EditPostModel model)
+    {
+        var post = _context.Post.FirstOrDefault(x => x.Id == model.PostId);
+
+        if (post == null)
+        {
+            throw new Exception("Post not found");
+        }
+
+        post.Title = model.Title;
+        post.Content = model.Content;
+        post.ImageUrl = model.ImageUrl;
+        post.VideoUrl = model.VideoUrl;
+        post.AudioUrl = model.AudioUrl;
+
+        _context.Post.Update(post);
+        _context.SaveChanges();
+
+        return Task.CompletedTask;
+    }
+
+    public Task GetPost(GetPostModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetPosts(GetPostModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetPostsByUser(GetPostsByUserModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task AddLike(AddLikeModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task RemoveLike(RemoveLikeModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task AddComment(AddCommentModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task RemoveComment(RemoveCommentModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task EditComment(EditCommentModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetComments(GetCommentsModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetLikes(GetLikesModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetLikesByUser(GetLikesByUserModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetCommentsByUser(GetCommentsByUserModel model)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task GetReposts(GetRepostsModel model)
+    {
+        throw new NotImplementedException();
+    }
+}
\ No newline at end of file
Index: Back-End-Service.Api/ServiceCollectionExtensions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Back_End_Service.Identity.Context;\r\nusing Back_End_Service.Identity.Entities;\r\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.IdentityModel.Tokens;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Back_End_Service.Chat.Service;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Back_End_Service;\r\n\r\npublic static class ServiceCollectionExtensions\r\n{\r\n    public static IServiceCollection AddDatabase(this IServiceCollection services, IConfiguration configuration)\r\n    {\r\n        services.AddDbContext<DataContext>(options =>\r\n            options.UseSqlServer(configuration.GetConnectionString(\"Service-Context-Connection\")));\r\n        services.AddScoped<IdentityUserManager>();\r\n        services.AddIdentity<User, IdentityRole>(options =>\r\n            {\r\n                // здесь настройки Identity, если требуется\r\n            })\r\n            .AddEntityFrameworkStores<DataContext>()\r\n            .AddDefaultTokenProviders();\r\n        services.AddScoped<IMessage, MessageService>();\r\n        \r\n        services.AddScoped<IFriendService, FriendService>();\r\n        services.Configure<IdentityOptions>(options =>\r\n            options.SignIn.RequireConfirmedEmail = true);\r\n        \r\n        services.AddAuthentication(option =>\r\n        {\r\n            option.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n            option.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n        }).AddJwtBearer(options =>\r\n        {\r\n            options.RequireHttpsMetadata = false;\r\n            options.SaveToken = true;\r\n            options.TokenValidationParameters = new TokenValidationParameters\r\n            {\r\n                ValidateIssuerSigningKey = true,\r\n                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\"Secret\"])),\r\n                ValidateIssuer = false,\r\n                ValidateAudience = false\r\n            };\r\n        });\r\n        // add cors \r\n        services.AddCors(options =>\r\n        {\r\n            options.AddPolicy(\"CorsPolicy\",\r\n                builder => builder\r\n                    .WithOrigins(\"http://localhost:3000\")\r\n                    .AllowAnyMethod()\r\n                    .AllowAnyHeader()\r\n                    .AllowCredentials());\r\n        });\r\n        services.AddScoped<UserManager<User>>();\r\n\r\n        return services;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Api/ServiceCollectionExtensions.cs b/Back-End-Service.Api/ServiceCollectionExtensions.cs
--- a/Back-End-Service.Api/ServiceCollectionExtensions.cs	
+++ b/Back-End-Service.Api/ServiceCollectionExtensions.cs	
@@ -7,6 +7,7 @@
 using System.Security.Cryptography;
 using System.Text;
 using Back_End_Service.Chat.Service;
+using Back_End_Service.Post.Service;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 
@@ -58,6 +59,7 @@
                     .AllowCredentials());
         });
         services.AddScoped<UserManager<User>>();
+        services.AddScoped<IPostService, PostService>();
 
         return services;
     }
Index: Back-End-Service.Api/UserProfile.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using AutoMapper;\r\nusing Back_End_Service.Chat.Models;\r\nusing Back_End_Service.Identity.Entities;\r\nusing Back_End_Service.Identity.Models;\r\n\r\nnamespace Back_End_Service;\r\n\r\npublic class UserProfile : Profile\r\n{\r\n    public UserProfile()\r\n    {\r\n        CreateMap<UserModel, User>();\r\n\r\n        CreateMap<User, AuthenticateResponse>();\r\n        \r\n        CreateMap<SendMessageModel, Message>();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Api/UserProfile.cs b/Back-End-Service.Api/UserProfile.cs
--- a/Back-End-Service.Api/UserProfile.cs	
+++ b/Back-End-Service.Api/UserProfile.cs	
@@ -2,7 +2,6 @@
 using Back_End_Service.Chat.Models;
 using Back_End_Service.Identity.Entities;
 using Back_End_Service.Identity.Models;
-
 namespace Back_End_Service;
 
 public class UserProfile : Profile
@@ -12,7 +11,10 @@
         CreateMap<UserModel, User>();
 
         CreateMap<User, AuthenticateResponse>();
-        
+
         CreateMap<SendMessageModel, Message>();
+
+        // post model to entity
+        CreateMap<CreatePostModel,Posts>();
     }
 }
\ No newline at end of file
Index: Back-End-Service.Identity/Entities/PostLike.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\npublic class PostLike\r\n{\r\n    public int Id { get; set; }\r\n\r\n    public int PostId { get; set; }\r\n    public virtual Post Post { get; set; }\r\n\r\n    public string UserId { get; set; }\r\n    public virtual User User { get; set; }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/PostLike.cs b/Back-End-Service.Identity/Entities/PostLike.cs
--- a/Back-End-Service.Identity/Entities/PostLike.cs	
+++ b/Back-End-Service.Identity/Entities/PostLike.cs	
@@ -2,10 +2,10 @@
 
 public class PostLike
 {
-    public int Id { get; set; }
+    public string Id { get; set; }
 
-    public int PostId { get; set; }
-    public virtual Post Post { get; set; }
+    public string PostId { get; set; }
+    public virtual Posts Posts { get; set; }
 
     public string UserId { get; set; }
     public virtual User User { get; set; }
Index: Back-End-Service.Identity/Entities/Photo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\npublic class Photo\r\n{\r\n    public int Id { get; set; }\r\n    public string Url { get; set; }\r\n    public string Title { get; set; }\r\n    public string Description { get; set; }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/Photo.cs b/Back-End-Service.Identity/Entities/Photo.cs
--- a/Back-End-Service.Identity/Entities/Photo.cs	
+++ b/Back-End-Service.Identity/Entities/Photo.cs	
@@ -2,7 +2,7 @@
 
 public class Photo
 {
-    public int Id { get; set; }
+    public string Id { get; set; }
     public string Url { get; set; }
     public string Title { get; set; }
     public string Description { get; set; }
Index: Back-End-Service.Identity/Entities/CommentLike.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\npublic class CommentLike\r\n{\r\n    public int Id { get; set; }\r\n\r\n    public int CommentId { get; set; }\r\n    public virtual Comment Comment { get; set; }\r\n\r\n    public string UserId { get; set; }\r\n    public virtual User User { get; set; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/CommentLike.cs b/Back-End-Service.Identity/Entities/CommentLike.cs
--- a/Back-End-Service.Identity/Entities/CommentLike.cs	
+++ b/Back-End-Service.Identity/Entities/CommentLike.cs	
@@ -2,9 +2,9 @@
 
 public class CommentLike
 {
-    public int Id { get; set; }
+    public string Id { get; set; }
 
-    public int CommentId { get; set; }
+    public string CommentId { get; set; }
     public virtual Comment Comment { get; set; }
 
     public string UserId { get; set; }
Index: Back-End-Service.Identity/Entities/Audio.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\n\r\npublic class Audio\r\n{\r\n    public int Id { get; set; }\r\n    public string Url { get; set; }\r\n    public string Title { get; set; }\r\n    public string Description { get; set; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/Audio.cs b/Back-End-Service.Identity/Entities/Audio.cs
--- a/Back-End-Service.Identity/Entities/Audio.cs	
+++ b/Back-End-Service.Identity/Entities/Audio.cs	
@@ -3,7 +3,7 @@
 
 public class Audio
 {
-    public int Id { get; set; }
+    public string Id { get; set; }
     public string Url { get; set; }
     public string Title { get; set; }
     public string Description { get; set; }
Index: Back-End-Service.Api/Controllers/FriendController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Back_End_Service.Chat;\r\nusing Back_End_Service.Chat.Models;\r\nusing Back_End_Service.Chat.Service;\r\nusing Back_End_Service.Identity.Context;\r\nusing Back_End_Service.Identity.Entities;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.SignalR;\r\n\r\nnamespace Back_End_Service.Controllers;\r\n\r\n[ApiController]\r\n[Route(Route)]\r\npublic class FriendController : ControllerBase\r\n{\r\n    private const string Route = \"api/friends\";\r\n\r\n    private readonly UserManager<User> _userManager;\r\n    private readonly IFriendService _friendService;\r\n    private readonly DataContext _context;\r\n\r\n    public FriendController(UserManager<User> userManager, IFriendService friendService, DataContext context)\r\n    {\r\n        _userManager = userManager;\r\n        _context = context;\r\n        _friendService = friendService;\r\n    }\r\n\r\n\r\n    [AllowAnonymous]\r\n    [HttpPost(\"getFriends\")]\r\n    public async Task<ActionResult<List<User>>> GetFriends(GetFriends getFriends)\r\n    {\r\n        var friends = await _friendService.GetFriends(getFriends);\r\n        return friends.ToList();\r\n    }\r\n\r\n    [Authorize]\r\n    [HttpPost(\"addFriend\")]\r\n    public async Task<ActionResult> AddFriend(AddFriends friends)\r\n    {\r\n        var currentUser = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n\r\n        if (currentUser == null)\r\n        {\r\n            return BadRequest(new { message = \"Invalid user.\" });\r\n        }\r\n\r\n        var response = await _friendService.AddFriendAsync(friends);\r\n\r\n\r\n        return Ok(response);\r\n    }\r\n\r\n\r\n    [Authorize]\r\n    [HttpPost(\"confirmFriendRequest\")]\r\n    public async Task<IActionResult> ConfirmFriendRequest(ConfirmFriendRequestAsync confirmFriendRequestAsync)\r\n    {\r\n        var user = User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value;\r\n\r\n        if (user == null)\r\n        {\r\n            return NotFound(\"User not found\");\r\n        }\r\n\r\n        await _friendService.ConfirmFriendRequestAsync(confirmFriendRequestAsync);\r\n\r\n\r\n        return Ok();\r\n    }\r\n\r\n    [Authorize]\r\n    [HttpPost(\"removeFriend\")]\r\n    public async Task<IActionResult> RemoveFriend(RemoveFriend removeFriend)\r\n    {\r\n        var user = await _userManager.FindByIdAsync(removeFriend.UserId);\r\n\r\n        if (user == null)\r\n        {\r\n            return NotFound(\"User not found\");\r\n        }\r\n\r\n        await _friendService.RemoveFriend(removeFriend, user);\r\n\r\n        return Ok();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Api/Controllers/FriendController.cs b/Back-End-Service.Api/Controllers/FriendController.cs
--- a/Back-End-Service.Api/Controllers/FriendController.cs	
+++ b/Back-End-Service.Api/Controllers/FriendController.cs	
@@ -30,15 +30,15 @@
 
     [AllowAnonymous]
     [HttpPost("getFriends")]
-    public async Task<ActionResult<List<User>>> GetFriends(GetFriends getFriends)
+    public async Task<ActionResult<List<User>>> GetFriends(GetFriendsModel getFriendsModel)
     {
-        var friends = await _friendService.GetFriends(getFriends);
+        var friends = await _friendService.GetFriends(getFriendsModel);
         return friends.ToList();
     }
 
     [Authorize]
     [HttpPost("addFriend")]
-    public async Task<ActionResult> AddFriend(AddFriends friends)
+    public async Task<ActionResult> AddFriend(AddFriendsModel friendsModel)
     {
         var currentUser = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
 
@@ -47,7 +47,7 @@
             return BadRequest(new { message = "Invalid user." });
         }
 
-        var response = await _friendService.AddFriendAsync(friends);
+        var response = await _friendService.AddFriendAsync(friendsModel);
 
 
         return Ok(response);
@@ -56,7 +56,7 @@
 
     [Authorize]
     [HttpPost("confirmFriendRequest")]
-    public async Task<IActionResult> ConfirmFriendRequest(ConfirmFriendRequestAsync confirmFriendRequestAsync)
+    public async Task<IActionResult> ConfirmFriendRequest(ConfirmFriendRequestAsyncModel confirmFriendRequestAsyncModel)
     {
         var user = User.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
 
@@ -65,7 +65,7 @@
             return NotFound("User not found");
         }
 
-        await _friendService.ConfirmFriendRequestAsync(confirmFriendRequestAsync);
+        await _friendService.ConfirmFriendRequestAsync(confirmFriendRequestAsyncModel);
 
 
         return Ok();
@@ -73,16 +73,16 @@
 
     [Authorize]
     [HttpPost("removeFriend")]
-    public async Task<IActionResult> RemoveFriend(RemoveFriend removeFriend)
+    public async Task<IActionResult> RemoveFriend(RemoveFriendModel removeFriendModel)
     {
-        var user = await _userManager.FindByIdAsync(removeFriend.UserId);
+        var user = await _userManager.FindByIdAsync(removeFriendModel.UserId);
 
         if (user == null)
         {
             return NotFound("User not found");
         }
 
-        await _friendService.RemoveFriend(removeFriend, user);
+        await _friendService.RemoveFriend(removeFriendModel, user);
 
         return Ok();
     }
Index: Back-End-Service.Identity/Entities/Comment.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\npublic class Comment\r\n{\r\n    public int Id { get; set; }\r\n    public string Content { get; set; }\r\n    public DateTime CreatedAt { get; set; }\r\n\r\n    public int PostId { get; set; }\r\n    public virtual Post Post { get; set; }\r\n\r\n    public virtual ICollection<CommentLike> Likes { get; set; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/Comment.cs b/Back-End-Service.Identity/Entities/Comment.cs
--- a/Back-End-Service.Identity/Entities/Comment.cs	
+++ b/Back-End-Service.Identity/Entities/Comment.cs	
@@ -2,12 +2,12 @@
 
 public class Comment
 {
-    public int Id { get; set; }
+    public string Id { get; set; }
     public string Content { get; set; }
     public DateTime CreatedAt { get; set; }
 
-    public int PostId { get; set; }
-    public virtual Post Post { get; set; }
+    public string PostId { get; set; }
+    public virtual Posts Posts { get; set; }
 
     public virtual ICollection<CommentLike> Likes { get; set; }
 }
\ No newline at end of file
Index: Back-End-Service.Identity/Entities/Video.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\n\r\npublic class Video\r\n{\r\n    public int Id { get; set; }\r\n    public string Url { get; set; }\r\n    public string Title { get; set; }\r\n    public string Description { get; set; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/Video.cs b/Back-End-Service.Identity/Entities/Video.cs
--- a/Back-End-Service.Identity/Entities/Video.cs	
+++ b/Back-End-Service.Identity/Entities/Video.cs	
@@ -3,7 +3,7 @@
 
 public class Video
 {
-    public int Id { get; set; }
+    public string Id { get; set; }
     public string Url { get; set; }
     public string Title { get; set; }
     public string Description { get; set; }
Index: Back-End-Service.Identity/Entities/Repost.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Back_End_Service.Identity.Entities;\r\n\r\npublic class Repost\r\n{\r\n    public int Id { get; set; }\r\n    public int PostId { get; set; }\r\n    public Post Post { get; set; }\r\n    public string UserId { get; set; }\r\n    public User User { get; set; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/Repost.cs b/Back-End-Service.Identity/Entities/Repost.cs
--- a/Back-End-Service.Identity/Entities/Repost.cs	
+++ b/Back-End-Service.Identity/Entities/Repost.cs	
@@ -2,9 +2,9 @@
 
 public class Repost
 {
-    public int Id { get; set; }
-    public int PostId { get; set; }
-    public Post Post { get; set; }
+    public string Id { get; set; }
+    public string PostId { get; set; }
+    public Posts Posts { get; set; }
     public string UserId { get; set; }
     public User User { get; set; }
 }
\ No newline at end of file
Index: Back-End-Service.Post/Model/CreatePostModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/CreatePostModel.cs b/Back-End-Service.Post/Model/CreatePostModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/CreatePostModel.cs	
@@ -0,0 +1,9 @@
+public class CreatePostModel
+{
+    public string Title { get; set; }
+    public string Content { get; set; }
+    public string ImageUrl { get; set; }
+    public string VideoUrl { get; set; }
+    public string AudioUrl { get; set; }
+    public string UserId { get; set; }
+}
\ No newline at end of file
Index: Back-End-Service.Chat/Service/FriendService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Back_End_Service.Chat.Models;\r\nusing Back_End_Service.Identity.Context;\r\nusing Back_End_Service.Identity.Entities;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\nnamespace Back_End_Service.Chat.Service;\r\n\r\npublic class FriendService : IFriendService\r\n{\r\n    private readonly UserManager<User> _userManager;\r\n\r\n    private readonly DataContext _context;\r\n\r\n    public FriendService(UserManager<User> userManager1, DataContext context)\r\n    {\r\n        _userManager = userManager1;\r\n        _context = context;\r\n    }\r\n\r\n\r\n    public async Task<Friend> AddFriendAsync(AddFriends addFriends)\r\n    {\r\n        var reverseFriend = await _context.Friend\r\n            .FirstOrDefaultAsync(f => f.UserId == addFriends.UserFriendId && f.UserFriendId == addFriends.UserId);\r\n\r\n        if (reverseFriend == null)\r\n        {\r\n            reverseFriend = new Friend\r\n            {\r\n                UserId = addFriends.UserFriendId,\r\n                UserFriendId = addFriends.UserId,\r\n                IsAccepted = true\r\n            };\r\n\r\n            _context.Friend.Add(reverseFriend);\r\n        }\r\n        else\r\n        {\r\n            reverseFriend.IsAccepted = true;\r\n            _context.Friend.Update(reverseFriend);\r\n        }\r\n\r\n        await _context.SaveChangesAsync();\r\n\r\n        var friend = await _context.Friend\r\n            .FirstOrDefaultAsync(f => f.UserId == addFriends.UserId && f.UserFriendId == addFriends.UserFriendId);\r\n\r\n        friend = new Friend\r\n        {\r\n            UserId = addFriends.UserId,\r\n            UserFriendId = addFriends.UserFriendId,\r\n            IsAccepted = false // Friend request\r\n        };\r\n\r\n        _context.Friend.Add(friend);\r\n        await _context.SaveChangesAsync();\r\n\r\n        return friend;\r\n    }\r\n\r\n\r\n    public async Task<bool> ConfirmFriendRequestAsync(ConfirmFriendRequestAsync confirmFriendRequestAsync)\r\n    {\r\n        var friend = await _context.Friend\r\n            .FirstOrDefaultAsync(f =>\r\n                f.UserId == confirmFriendRequestAsync.UserId &&\r\n                f.UserFriendId == confirmFriendRequestAsync.UserFriendId && f.IsAccepted == false);\r\n\r\n        if (friend == null)\r\n        {\r\n            // Friend request not found\r\n            return false;\r\n        }\r\n\r\n        friend.IsAccepted = true;\r\n\r\n        _context.Friend.Update(friend);\r\n        await _context.SaveChangesAsync();\r\n\r\n        return true;\r\n    }\r\n\r\n    public async Task RemoveFriend(RemoveFriend removeFriend, User user)\r\n    {\r\n        if (user == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(user));\r\n        }\r\n\r\n        if (user.Friends == null)\r\n        {\r\n            user.Friends = new List<Friend>();\r\n        }\r\n\r\n        var friend = _context.Friend.FirstOrDefault(x => x.UserFriendId == removeFriend.FriendId);\r\n\r\n        if (friend == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n        user.Friends.Remove(friend);\r\n\r\n        if (friend.UserFriend?.FriendsOf != null)\r\n        {\r\n            friend.UserFriend.FriendsOf.Remove(friend);\r\n        }\r\n\r\n        await _userManager.UpdateAsync(user);\r\n    }\r\n\r\n    public async Task<List<User>> GetFriends(GetFriends getFriends)\r\n    {\r\n        var user = await _userManager.FindByIdAsync(getFriends.UserId);\r\n        if (user == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n        var friends = _context.Friend.Select(x => x.UserFriend).ToList();\r\n        return friends;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Chat/Service/FriendService.cs b/Back-End-Service.Chat/Service/FriendService.cs
--- a/Back-End-Service.Chat/Service/FriendService.cs	
+++ b/Back-End-Service.Chat/Service/FriendService.cs	
@@ -24,53 +24,58 @@
     }
 
 
-    public async Task<Friend> AddFriendAsync(AddFriends addFriends)
+    public async Task<Friend> AddFriendAsync(AddFriendsModel addFriendsModel)
     {
         var reverseFriend = await _context.Friend
-            .FirstOrDefaultAsync(f => f.UserId == addFriends.UserFriendId && f.UserFriendId == addFriends.UserId);
-
+            .FirstOrDefaultAsync(f => f.UserId == addFriendsModel.UserFriendId && f.UserFriendId == addFriendsModel.UserId);
         if (reverseFriend == null)
         {
             reverseFriend = new Friend
             {
-                UserId = addFriends.UserFriendId,
-                UserFriendId = addFriends.UserId,
-                IsAccepted = true
+                UserId = addFriendsModel.UserFriendId,
+                UserFriendId = addFriendsModel.UserId,
+                IsAccepted = false
             };
 
             _context.Friend.Add(reverseFriend);
+            await _context.SaveChangesAsync();
         }
         else
         {
             reverseFriend.IsAccepted = true;
             _context.Friend.Update(reverseFriend);
-        }
-
-        await _context.SaveChangesAsync();
+            await _context.SaveChangesAsync();
 
-        var friend = await _context.Friend
-            .FirstOrDefaultAsync(f => f.UserId == addFriends.UserId && f.UserFriendId == addFriends.UserFriendId);
+            var friend = await _context.Friend
+                .FirstOrDefaultAsync(f => f.UserId == addFriendsModel.UserId && f.UserFriendId == addFriendsModel.UserFriendId);
 
-        friend = new Friend
-        {
-            UserId = addFriends.UserId,
-            UserFriendId = addFriends.UserFriendId,
-            IsAccepted = false // Friend request
-        };
-
-        _context.Friend.Add(friend);
-        await _context.SaveChangesAsync();
+            friend.IsAccepted = true;
+            _context.Friend.Update(friend);
+            await _context.SaveChangesAsync();
 
-        return friend;
-    }
+            return friend;
+        }
 
+        var newFriendRequest = new Friend
+        {
+            UserId = addFriendsModel.UserId,
+            UserFriendId = addFriendsModel.UserFriendId,
+            IsAccepted = false // Friend request
+        };
+
+        _context.Friend.Add(newFriendRequest);
+        await _context.SaveChangesAsync();
 
-    public async Task<bool> ConfirmFriendRequestAsync(ConfirmFriendRequestAsync confirmFriendRequestAsync)
+        return newFriendRequest;
+    }
+
+
+    public async Task<bool> ConfirmFriendRequestAsync(ConfirmFriendRequestAsyncModel confirmFriendRequestAsyncModel)
     {
         var friend = await _context.Friend
             .FirstOrDefaultAsync(f =>
-                f.UserId == confirmFriendRequestAsync.UserId &&
-                f.UserFriendId == confirmFriendRequestAsync.UserFriendId && f.IsAccepted == false);
+                f.UserId == confirmFriendRequestAsyncModel.UserId &&
+                f.UserFriendId == confirmFriendRequestAsyncModel.UserFriendId && f.IsAccepted == false);
 
         if (friend == null)
         {
@@ -79,14 +84,25 @@
         }
 
         friend.IsAccepted = true;
-
         _context.Friend.Update(friend);
         await _context.SaveChangesAsync();
 
+        var reverseFriend = await _context.Friend
+            .FirstOrDefaultAsync(f =>
+                f.UserId == confirmFriendRequestAsyncModel.UserFriendId &&
+                f.UserFriendId == confirmFriendRequestAsyncModel.UserId);
+
+        if (reverseFriend != null)
+        {
+            reverseFriend.IsAccepted = true;
+            _context.Friend.Update(reverseFriend);
+            await _context.SaveChangesAsync();
+        }
+
         return true;
     }
 
-    public async Task RemoveFriend(RemoveFriend removeFriend, User user)
+    public async Task RemoveFriend(RemoveFriendModel removeFriendModel, User user)
     {
         if (user == null)
         {
@@ -98,7 +114,7 @@
             user.Friends = new List<Friend>();
         }
 
-        var friend = _context.Friend.FirstOrDefault(x => x.UserFriendId == removeFriend.FriendId);
+        var friend = _context.Friend.FirstOrDefault(x => x.UserFriendId == removeFriendModel.FriendId);
 
         if (friend == null)
         {
@@ -115,9 +131,9 @@
         await _userManager.UpdateAsync(user);
     }
 
-    public async Task<List<User>> GetFriends(GetFriends getFriends)
+    public async Task<List<User>> GetFriends(GetFriendsModel getFriendsModel)
     {
-        var user = await _userManager.FindByIdAsync(getFriends.UserId);
+        var user = await _userManager.FindByIdAsync(getFriendsModel.UserId);
         if (user == null)
         {
             throw new Exception("User not found");
Index: Back-End-Service.Chat/Service/IFriendService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\nusing Back_End_Service.Chat.Models;\r\nusing Back_End_Service.Identity.Entities;\r\n\r\nnamespace Back_End_Service.Chat.Service;\r\n\r\npublic interface IFriendService\r\n{\r\n    Task<Friend> AddFriendAsync(AddFriends addFriends);\r\n    Task<bool> ConfirmFriendRequestAsync(ConfirmFriendRequestAsync confirmFriendRequestAsync);\r\n\r\n    Task RemoveFriend(RemoveFriend removeFriend, User user);\r\n\r\n    Task<List<User>> GetFriends(GetFriends getFriends);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Chat/Service/IFriendService.cs b/Back-End-Service.Chat/Service/IFriendService.cs
--- a/Back-End-Service.Chat/Service/IFriendService.cs	
+++ b/Back-End-Service.Chat/Service/IFriendService.cs	
@@ -7,10 +7,10 @@
 
 public interface IFriendService
 {
-    Task<Friend> AddFriendAsync(AddFriends addFriends);
-    Task<bool> ConfirmFriendRequestAsync(ConfirmFriendRequestAsync confirmFriendRequestAsync);
+    Task<Friend> AddFriendAsync(AddFriendsModel addFriendsModel);
+    Task<bool> ConfirmFriendRequestAsync(ConfirmFriendRequestAsyncModel confirmFriendRequestAsyncModel);
 
-    Task RemoveFriend(RemoveFriend removeFriend, User user);
+    Task RemoveFriend(RemoveFriendModel removeFriendModel, User user);
 
-    Task<List<User>> GetFriends(GetFriends getFriends);
+    Task<List<User>> GetFriends(GetFriendsModel getFriendsModel);
 }
\ No newline at end of file
Index: Back-End-Service.Post/Model/DeletePostModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/DeletePostModel.cs b/Back-End-Service.Post/Model/DeletePostModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/DeletePostModel.cs	
@@ -0,0 +1,4 @@
+public class DeletePostModel
+{
+    public string PostId { get; set; }
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/GetPostsByUserModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetPostsByUserModel.cs b/Back-End-Service.Post/Model/GetPostsByUserModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetPostsByUserModel.cs	
@@ -0,0 +1,3 @@
+public class GetPostsByUserModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/RepostPostModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/RepostPostModel.cs b/Back-End-Service.Post/Model/RepostPostModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/RepostPostModel.cs	
@@ -0,0 +1,5 @@
+public class RepostPostModel
+{
+    public string PostId { get; set; }
+    public string UserId { get; set; }
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/AddLikeModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/AddLikeModel.cs b/Back-End-Service.Post/Model/AddLikeModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/AddLikeModel.cs	
@@ -0,0 +1,3 @@
+public class AddLikeModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/RemoveLikeModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/RemoveLikeModel.cs b/Back-End-Service.Post/Model/RemoveLikeModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/RemoveLikeModel.cs	
@@ -0,0 +1,3 @@
+public class RemoveLikeModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/GetPostModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetPostModel.cs b/Back-End-Service.Post/Model/GetPostModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetPostModel.cs	
@@ -0,0 +1,3 @@
+public class GetPostModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/GetRepostsModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetRepostsModel.cs b/Back-End-Service.Post/Model/GetRepostsModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetRepostsModel.cs	
@@ -0,0 +1,3 @@
+public class GetRepostsModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/GetLikesByUserModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetLikesByUserModel.cs b/Back-End-Service.Post/Model/GetLikesByUserModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetLikesByUserModel.cs	
@@ -0,0 +1,3 @@
+public class GetLikesByUserModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/GetCommentsByUserModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetCommentsByUserModel.cs b/Back-End-Service.Post/Model/GetCommentsByUserModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetCommentsByUserModel.cs	
@@ -0,0 +1,3 @@
+public class GetCommentsByUserModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/RemoveCommentModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/RemoveCommentModel.cs b/Back-End-Service.Post/Model/RemoveCommentModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/RemoveCommentModel.cs	
@@ -0,0 +1,3 @@
+public class RemoveCommentModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/EditPostModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/EditPostModel.cs b/Back-End-Service.Post/Model/EditPostModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/EditPostModel.cs	
@@ -0,0 +1,16 @@
+public class EditPostModel
+{
+    public string PostId { get; set; }
+    
+    public string Title { get; set; }
+    
+    public string Content { get; set; }
+    
+    public string ImageUrl { get; set; }
+    
+    public string VideoUrl { get; set; }
+    
+    public string AudioUrl { get; set; }
+    
+    
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/GetCommentsModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetCommentsModel.cs b/Back-End-Service.Post/Model/GetCommentsModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetCommentsModel.cs	
@@ -0,0 +1,3 @@
+public class GetCommentsModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Post/Model/EditCommentModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/EditCommentModel.cs b/Back-End-Service.Post/Model/EditCommentModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/EditCommentModel.cs	
@@ -0,0 +1,3 @@
+public class EditCommentModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Identity/Context/DateContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Back_End_Service.Identity.Entities;\r\nusing Microsoft.AspNetCore.Identity.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace Back_End_Service.Identity.Context;\r\n\r\npublic class DataContext : IdentityDbContext<User>\r\n{\r\n    public DbSet<Friend> Friend { get; set; }\r\n\r\n    public DbSet<Message> Message { get; set; }\r\n\r\n    public DbSet<ChatRoom> ChatRoom { get; set; }\r\n\r\n    public DbSet<Post> Post { get; set; }\r\n\r\n    public DbSet<PostLike> PostLike { get; set; }\r\n\r\n    public DbSet<Comment> Comment { get; set; }\r\n    \r\n    public DbSet<CommentLike> CommentLike { get; set; }\r\n\r\n    public DbSet<Repost> Repost { get; set; }\r\n\r\n    public DbSet<Photo> Photo { get; set; }\r\n\r\n    public DbSet<Video> Video { get; set; }\r\n\r\n    public DbSet<Audio> Audio { get; set; }\r\n\r\n\r\n    public DataContext(DbContextOptions<DataContext> options) :\r\n        base(options)\r\n    {\r\n    }\r\n\r\n\r\n    protected override void OnModelCreating(ModelBuilder builder)\r\n    {\r\n        base.OnModelCreating(builder);\r\n\r\n\r\n        builder.Entity<Friend>(b =>\r\n        {\r\n            b.HasKey(x => new { x.UserId, x.UserFriendId });\r\n\r\n            b.HasOne(x => x.User)\r\n                .WithMany(x => x.Friends)\r\n                .HasForeignKey(x => x.UserId)\r\n                .OnDelete(DeleteBehavior.Restrict);\r\n\r\n            b.HasOne(x => x.UserFriend)\r\n                .WithMany(x => x.FriendsOf)\r\n                .HasForeignKey(x => x.UserFriendId)\r\n                .OnDelete(DeleteBehavior.Restrict);\r\n        });\r\n\r\n        builder.Entity<Message>()\r\n            .HasOne<User>(m => m.Sender)\r\n            .WithMany(u => u.SentMessages)\r\n            .HasForeignKey(m => m.SenderId)\r\n            .OnDelete(DeleteBehavior.Restrict);\r\n\r\n        builder.Entity<Message>()\r\n            .HasOne<User>(m => m.Receiver)\r\n            .WithMany(u => u.ReceivedMessages)\r\n            .HasForeignKey(m => m.ReceiverId)\r\n            .OnDelete(DeleteBehavior.Restrict);\r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Context/DateContext.cs b/Back-End-Service.Identity/Context/DateContext.cs
--- a/Back-End-Service.Identity/Context/DateContext.cs	
+++ b/Back-End-Service.Identity/Context/DateContext.cs	
@@ -12,7 +12,7 @@
 
     public DbSet<ChatRoom> ChatRoom { get; set; }
 
-    public DbSet<Post> Post { get; set; }
+    public DbSet<Posts> Post { get; set; }
 
     public DbSet<PostLike> PostLike { get; set; }
 
Index: Back-End-Service.Post/Model/GetLikesModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Model/GetLikesModel.cs b/Back-End-Service.Post/Model/GetLikesModel.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Model/GetLikesModel.cs	
@@ -0,0 +1,3 @@
+public class GetLikesModel
+{
+}
\ No newline at end of file
Index: Back-End-Service.Identity/Service/UserService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using AutoMapper;\r\nusing Back_End_Service.Identity.Entities;\r\nusing Back_End_Service.Identity.Helpers;\r\nusing Back_End_Service.Identity.Models;\r\nusing MailKit.Net.Smtp;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.Configuration;\r\nusing MimeKit;\r\n\r\nnamespace Back_End_Service.Identity.Service;\r\n\r\npublic class UserService : IUserService\r\n{\r\n    private readonly IConfiguration _configuration;\r\n    private readonly IMapper _mapper;\r\n    private readonly UserManager<User> _userManager;\r\n    private readonly SignInManager<User> _signInManager;\r\n\r\n    private const string emailName = \"faitauaofficial\";\r\n    private const string emailNameAdd = emailName + \"@gmail.com\";\r\n    private const string emailPassword = \"ysvakfvcfjpqmnom\";\r\n\r\n    public UserService(\r\n        IConfiguration configuration,\r\n        IMapper mapper, UserManager<User> userManager, SignInManager<User> signInManager)\r\n    {\r\n        _configuration = configuration;\r\n        _mapper = mapper;\r\n        _userManager = userManager;\r\n        _signInManager = signInManager;\r\n    }\r\n\r\n\r\n    public async Task Register(UserModel userModel, string? route)\r\n    {\r\n        var user = _mapper.Map<User>(userModel);\r\n\r\n        var result = await _userManager.CreateAsync(user, userModel.Password);\r\n\r\n        if (!result.Succeeded)\r\n        {\r\n            throw new AggregateException(\r\n                result.Errors.Select(s => new Exception(s.Description)));\r\n        }\r\n\r\n        var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);\r\n        var confirmationLink =\r\n            route + $\"?userid={user.Id}&token={token}\";\r\n        await SendEmailAsync(userModel.Email, $\"confirm email\",\r\n            $\"Link confirm email: {confirmationLink} \");\r\n    }\r\n\r\n    public async Task Logout(string userid)\r\n    {\r\n        var user = await _userManager.FindByIdAsync(userid);\r\n        if (user == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n        await _signInManager.SignOutAsync();\r\n    }\r\n\r\n    private async Task SendEmailAsync(string email, string subject, string message)\r\n    {\r\n        using var emailMessage = new MimeMessage();\r\n\r\n        emailMessage.From.Add(new MailboxAddress(\"Faita\", \"faitauaofficial@gmail.com\"));\r\n        emailMessage.To.Add(new MailboxAddress(\"\", email));\r\n        emailMessage.Subject = subject;\r\n        emailMessage.Body = new TextPart(MimeKit.Text.TextFormat.Html)\r\n        {\r\n            Text = message\r\n        };\r\n\r\n        using var client = new SmtpClient();\r\n        {\r\n            await client.ConnectAsync(\"smtp.gmail.com\", 465, true);\r\n            await client.AuthenticateAsync(emailNameAdd, emailPassword);\r\n            await client.SendAsync(emailMessage);\r\n            await client.DisconnectAsync(true);\r\n        }\r\n    }\r\n\r\n    public async Task<AuthenticateResponse> Authenticate(AuthenticateRequest model)\r\n    {\r\n        var user = await _userManager.FindByNameAsync(model.Username);\r\n\r\n        if (user == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n        var result = await _userManager.CheckPasswordAsync(user, model.Password);\r\n\r\n        if (!result)\r\n        {\r\n            throw new Exception(\"Login or Password is incorrect\");\r\n        }\r\n\r\n        var token = _configuration.GenerateJwtToken(user);\r\n\r\n        return new AuthenticateResponse(user, token);\r\n    }\r\n\r\n    public async Task ChangePasswordAsync(ChangePassword changePassword, string route, User user)\r\n    {\r\n        if (user == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n        var changePasswordResult =\r\n            await _userManager.CheckPasswordAsync(user, changePassword.Password);\r\n\r\n\r\n        if (!changePasswordResult)\r\n        {\r\n            throw new Exception(\"Password is incorrect\");\r\n        }\r\n\r\n        var change =\r\n            await _userManager.ChangePasswordAsync(user, changePassword.Password, changePassword.NewPassword);\r\n\r\n\r\n        if (!change.Succeeded)\r\n        {\r\n            throw new AggregateException(\r\n                change.Errors.Select(s => new Exception(s.Description)));\r\n        }\r\n\r\n        await SendEmailAsync(changePassword.Email, $\"confirm password\",\r\n            $\" Confirm password \");\r\n    }\r\n\r\n    public async Task ChangeEmailAsync(ChangeEmail changeEmail)\r\n    {\r\n        var user = await _userManager.FindByEmailAsync(changeEmail.Email);\r\n        var validToken = changeEmail.Token.Replace(\" \", \"+\");\r\n        var result = await _userManager.ChangeEmailAsync(user, changeEmail.NewEmail, validToken);\r\n\r\n        if (!result.Succeeded)\r\n        {\r\n            throw new AggregateException(\r\n                result.Errors.Select(s => new Exception(s.Description)));\r\n        }\r\n    }\r\n\r\n\r\n    public async Task ChangeUserDataAsync(ChangeUserData changeUserData, User user)\r\n    {\r\n        if (user == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n        user.FirstName = changeUserData.FirstName;\r\n        user.LastName = changeUserData.LastName;\r\n\r\n        var result = await _userManager.UpdateAsync(user);\r\n\r\n        if (!result.Succeeded)\r\n        {\r\n            throw new AggregateException(\r\n                result.Errors.Select(s => new Exception(s.Description)));\r\n        }\r\n    }\r\n\r\n\r\n    public Task GetUserId(string userId)\r\n    {\r\n        var user = _userManager.FindByIdAsync(userId);\r\n        return user;\r\n    }\r\n\r\n\r\n    public async Task SendRequestChangeEmailAsync(SendChangeEmail changeEmail, string route, User user)\r\n    {\r\n        if (user == null)\r\n        {\r\n            throw new Exception(\"User not found\");\r\n        }\r\n\r\n\r\n        if (user.Email == changeEmail.NewEmail)\r\n        {\r\n            throw new Exception(\"Email is the same\");\r\n        }\r\n\r\n        var token = await _userManager.GenerateChangeEmailTokenAsync(user, changeEmail.NewEmail);\r\n        var validToken = token.Replace(\" \", \"+\");\r\n\r\n\r\n        if (validToken == null)\r\n        {\r\n            throw new Exception(\"Token is null\");\r\n        }\r\n\r\n        var confirmationLink =\r\n            route + $\"?email={user.Email}&newEmail={changeEmail.NewEmail}&token={validToken}\";\r\n        await SendEmailAsync(changeEmail.NewEmail, $\"link change email\",\r\n            $\"Link change email: {confirmationLink} \");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Service/UserService.cs b/Back-End-Service.Identity/Service/UserService.cs
--- a/Back-End-Service.Identity/Service/UserService.cs	
+++ b/Back-End-Service.Identity/Service/UserService.cs	
@@ -50,18 +50,8 @@
         await SendEmailAsync(userModel.Email, $"confirm email",
             $"Link confirm email: {confirmationLink} ");
     }
-
-    public async Task Logout(string userid)
-    {
-        var user = await _userManager.FindByIdAsync(userid);
-        if (user == null)
-        {
-            throw new Exception("User not found");
-        }
+    
 
-        await _signInManager.SignOutAsync();
-    }
-
     private async Task SendEmailAsync(string email, string subject, string message)
     {
         using var emailMessage = new MimeMessage();
Index: Back-End-Service.Identity/Entities/User.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Identity;\r\n\r\nnamespace Back_End_Service.Identity.Entities;\r\n\r\npublic class User : IdentityUser\r\n{\r\n    public string FirstName { get; set; }\r\n    public string LastName { get; set; }\r\n    public string Patronymic { get; set; }\r\n\r\n    public bool CanSendGifs { get; set; }\r\n    public bool CanSendEmojis { get; set; }\r\n    \r\n    public string? Avatar { get; set; }\r\n    public ICollection<Friend> FriendsOf { get; set; }\r\n    public ICollection<Friend> Friends { get; set; }\r\n\r\n    // Связь между пользователем и отправленными сообщениями\r\n    public ICollection<Message> SentMessages { get; set; }\r\n\r\n    // Связь между пользователем и полученными сообщениями\r\n    \r\n    \r\n    public ICollection<Message> ReceivedMessages { get; set; }\r\n\r\n    // Связь между пользователем и комнатами чата\r\n    public ICollection<ChatRoom> ChatRooms { get; set; }\r\n\r\n    // Связь между пользователем и постами\r\n    public ICollection<Post> Posts { get; set; }\r\n\r\n    public virtual ICollection<PostLike> PostLikes { get; set; }\r\n    public virtual ICollection<CommentLike> CommentLikes { get; set; }\r\n\r\n    // связь между юзер и репостами\r\n    public ICollection<Repost> Reposts { get; set; }\r\n\r\n    // Фотографии пользователя\r\n    public ICollection<Photo> Photos { get; set; }\r\n\r\n    // Видеозаписи пользователя\r\n    public ICollection<Video> Videos { get; set; }\r\n\r\n    // Аудиозаписи пользователя\r\n    public ICollection<Audio> Audios { get; set; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Identity/Entities/User.cs b/Back-End-Service.Identity/Entities/User.cs
--- a/Back-End-Service.Identity/Entities/User.cs	
+++ b/Back-End-Service.Identity/Entities/User.cs	
@@ -27,7 +27,8 @@
     public ICollection<ChatRoom> ChatRooms { get; set; }
 
     // Связь между пользователем и постами
-    public ICollection<Post> Posts { get; set; }
+    public ICollection<Posts> Posts { get; set; }
+    
 
     public virtual ICollection<PostLike> PostLikes { get; set; }
     public virtual ICollection<CommentLike> CommentLikes { get; set; }
Index: Back-End-Service.Api/Controllers/PostController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Api/Controllers/PostController.cs b/Back-End-Service.Api/Controllers/PostController.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Api/Controllers/PostController.cs	
@@ -0,0 +1,34 @@
+using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Back_End_Service.Controllers;
+
+[ApiController]
+[Route(Route)]
+public class PostController : ControllerBase
+{
+    private const string Route = "api/[controller]";
+
+    private readonly IPostService _postService;
+    
+    public PostController(IPostService postService)
+    {
+        _postService = postService;
+    }
+    
+    [Authorize]
+    [HttpPost]
+    public async Task<IActionResult> CreatePost(CreatePostModel model)
+    {
+        var post = await _postService.CreatePost(model);
+        return Ok(post);
+    }
+    
+    [Authorize]
+    [HttpPost("repost")]
+    public async Task<IActionResult> RepostPost(RepostPostModel model)
+    {
+        await _postService.RepostPost(model);
+        return Ok();
+    }
+}
\ No newline at end of file
Index: Back-End-Service.Post/Service/IPostService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back-End-Service.Post/Service/IPostService.cs b/Back-End-Service.Post/Service/IPostService.cs
new file mode 100644
--- /dev/null	
+++ b/Back-End-Service.Post/Service/IPostService.cs	
@@ -0,0 +1,37 @@
+public interface IPostService
+{
+    Task<Posts> CreatePost(CreatePostModel model);
+
+    Task RepostPost(RepostPostModel model);
+
+    Task DeletePost(DeletePostModel model);
+
+    Task EditPost(EditPostModel model);
+
+    Task GetPost(GetPostModel model);
+
+    Task GetPosts(GetPostModel model);
+
+    Task GetPostsByUser(GetPostsByUserModel model);
+
+    Task AddLike(AddLikeModel model);
+
+    Task RemoveLike(RemoveLikeModel model);
+
+    Task AddComment(AddCommentModel model);
+
+    Task RemoveComment(RemoveCommentModel model);
+
+    Task EditComment(EditCommentModel model);
+
+    Task GetComments(GetCommentsModel model);
+
+    Task GetLikes(GetLikesModel model);
+
+    Task GetLikesByUser(GetLikesByUserModel model);
+
+    Task GetCommentsByUser(GetCommentsByUserModel model);
+    
+    Task GetReposts(GetRepostsModel model);
+    
+}
\ No newline at end of file
Index: .idea/.idea.Back-End-Service/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoGeneratedRunConfigurationManager\">\r\n    <projectFile profileName=\"Back_End_Service_Identity\">Back-End-Service-Identity/Back-End-Service-Identity.csproj</projectFile>\r\n    <projectFile profileName=\"IIS Express\">Back-End-Service-Identity/Back-End-Service-Identity.csproj</projectFile>\r\n    <projectFile profileName=\"Back_End_Service\">Back-End-Service.Api/Back-End-Service.Api.csproj</projectFile>\r\n    <projectFile profileName=\"IIS Express\">Back-End-Service.Api/Back-End-Service.Api.csproj</projectFile>\r\n    <projectFile profileName=\"Back_End_Service\">Back-End-Service/Back-End-Service.csproj</projectFile>\r\n    <projectFile profileName=\"IIS Express\">Back-End-Service/Back-End-Service.csproj</projectFile>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5dcf4656-5e63-4770-a730-1144d7f9780f\" name=\"Changes\" comment=\"Add funcional db Post,fix bag or MessageService.cs\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"11dc4a0a-f787-4f91-be8e-e4a5e67fb7f8\" />\r\n        <option name=\"url\" value=\"https://github.com/NonamePoc/MessageService\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/108afe858165a89d9c44a73767f5520cca5eb89fd357279e999a7196377/ValueTuple.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/2910ef137383b99848b2f64b9633ca2b0f798c19bb9291c734b636028b27d9/IReadOnlyEntityType.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/4edad4663e8ccb98f91581e67b1a8711fe263d78ffe6e7571d5eef7d959df/RuntimeEntityType.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/514db9918645d533daccb94eba3fb284294da1c4d4440abd0cf214f15dda490/EntityFinder.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/8fdca3c37271eed53182a48020b278215e8c99111db3cd3cf8d97bea25f6ca8/IEntityType.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/928523f08964492b10792127821f369a6464b88be5a48e8ce4aa6975f23538/Array.Enumerators.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/981d65c7fbe528a515db85bcbb92fe19ea3641e6ccd184df299fbba0eff72630/AnyAll.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/aacc74311ca994f12b71cddb22241be9d6654c65e94f5985c5488dee396916f/DbContext.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/ade8489ce7ef65adf139b4b44c407b47103f4ab5b355e53c416211864e7f594/EntityFinderSource.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/b34cda9bf13421d0d691446062e86e73ba22b7a724d9d34a2425bb1cc627e1/SR.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/c6ad457575d35dcbff26c9a5e3fb1d92f1d3c55f25ef6ebf475367b5d8/List.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/df71358f7b7337a1eee3a65abe6d678dd9a065e256b8cc3fd44a2949754/Object.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/fd4b12b3b09eb75d541efd2e12445569c7a57d8dc3745453ff2aaa61df28b1e/Hub.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Back-End-Service.Api/Controllers/UserController.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Back-End-Service.Api/Program.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Back-End-Service.Api/SeedData.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Back-End-Service.Api/UserProfile.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MetaFilesCheckinStateConfiguration\" checkMetaFiles=\"false\" />\r\n  <component name=\"ProjectId\" id=\"2Nm9YPlcEd8Ey1oyg4cCGYodrhg\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;XThreadsFramesViewSplitterKey&quot;: &quot;0.50076336&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;discord-application&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;sqlserver&quot;,\r\n      &quot;sqlserver.localdb&quot;\r\n    ],\r\n    &quot;rider.external.source.directories&quot;: [\r\n      &quot;C:\\\\Users\\\\marlb\\\\AppData\\\\Roaming\\\\JetBrains\\\\Rider2022.3\\\\resharper-host\\\\DecompilerCache&quot;,\r\n      &quot;C:\\\\Users\\\\marlb\\\\AppData\\\\Roaming\\\\JetBrains\\\\Rider2022.3\\\\resharper-host\\\\SourcesCache&quot;,\r\n      &quot;C:\\\\Users\\\\marlb\\\\AppData\\\\Local\\\\Symbols\\\\src&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\".NET Launch Settings Profile.Back-End-Service.Api: Back_End_Service\">\r\n    <configuration name=\"Back-End-Service.Api: Back_End_Service\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/Back-End-Service.Api/Back-End-Service.Api.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\"net6.0\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"Back_End_Service\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Back-End-Service.Api: IIS Express\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/Back-End-Service.Api/Back-End-Service.Api.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\"net6.0\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"IIS Express\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5dcf4656-5e63-4770-a730-1144d7f9780f\" name=\"Changes\" comment=\"\" />\r\n      <created>1680258447457</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1680258447457</updated>\r\n      <workItem from=\"1680258449072\" duration=\"966000\" />\r\n      <workItem from=\"1680297631403\" duration=\"75000\" />\r\n      <workItem from=\"1680341937292\" duration=\"2016000\" />\r\n      <workItem from=\"1680344673289\" duration=\"8386000\" />\r\n      <workItem from=\"1680426413405\" duration=\"5272000\" />\r\n      <workItem from=\"1680460004521\" duration=\"4799000\" />\r\n      <workItem from=\"1680602666599\" duration=\"74000\" />\r\n      <workItem from=\"1680602757415\" duration=\"2072000\" />\r\n      <workItem from=\"1680792104040\" duration=\"374000\" />\r\n      <workItem from=\"1680868587211\" duration=\"5314000\" />\r\n      <workItem from=\"1680881079938\" duration=\"113000\" />\r\n      <workItem from=\"1680881508422\" duration=\"192000\" />\r\n      <workItem from=\"1681031605085\" duration=\"4205000\" />\r\n      <workItem from=\"1681049479005\" duration=\"645000\" />\r\n      <workItem from=\"1681050154371\" duration=\"106000\" />\r\n      <workItem from=\"1681050279182\" duration=\"3395000\" />\r\n      <workItem from=\"1681214749976\" duration=\"4191000\" />\r\n      <workItem from=\"1681219925363\" duration=\"544000\" />\r\n      <workItem from=\"1681310417517\" duration=\"4852000\" />\r\n      <workItem from=\"1681387626350\" duration=\"8427000\" />\r\n      <workItem from=\"1681462917378\" duration=\"12082000\" />\r\n      <workItem from=\"1681550678614\" duration=\"629000\" />\r\n      <workItem from=\"1681721449413\" duration=\"11071000\" />\r\n      <workItem from=\"1681751622014\" duration=\"1199000\" />\r\n      <workItem from=\"1681799458276\" duration=\"3540000\" />\r\n      <workItem from=\"1681816242523\" duration=\"5294000\" />\r\n      <workItem from=\"1681893495467\" duration=\"1973000\" />\r\n      <workItem from=\"1681895996360\" duration=\"4366000\" />\r\n      <workItem from=\"1681973333956\" duration=\"4066000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Add joinRoom ,update DataBase\">\r\n      <created>1681217556272</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681217556272</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Fix problem send message\">\r\n      <created>1681218202774</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681218202774</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Add CreateChatRoomModel.cs , fix bugs joinRoom\">\r\n      <created>1681311797890</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681311797890</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Fix GetChatRooms\">\r\n      <created>1681464796479</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681464796479</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Add search user (UserController)\">\r\n      <created>1681467466541</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681467466541</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Fix bag add FriendService.cs\">\r\n      <created>1681479063062</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681479063062</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Fix  FriendService.cs\">\r\n      <created>1681722548790</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681722548790</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"add MessageService.cs new method\">\r\n      <created>1681817761069</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681817761069</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"9\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnityCheckinConfiguration\" checkUnsavedScenes=\"false\" />\r\n  <component name=\"UnityUnitTestConfiguration\" currentTestLauncher=\"Both\" />\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"dotnet:Microsoft.Identity.Client\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"dotnet:Microsoft.EntityFrameworkCore.Abstractions\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"dotnet:Microsoft.EntityFrameworkCore.Relational\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"dotnet:Microsoft.Extensions.Logging\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"dotnet:Microsoft.EntityFrameworkCore\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"Add joinRoom ,update DataBase\" />\r\n    <MESSAGE value=\"Fix problem send message\" />\r\n    <MESSAGE value=\"Add CreateChatRoomModel.cs , fix bugs joinRoom\" />\r\n    <MESSAGE value=\"Fix GetChatRooms\" />\r\n    <MESSAGE value=\"Add search user (UserController)\" />\r\n    <MESSAGE value=\"Fix bag add FriendService.cs\" />\r\n    <MESSAGE value=\"Fix  FriendService.cs\" />\r\n    <MESSAGE value=\"add MessageService.cs new method\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add MessageService.cs new method\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Back-End-Service.Chat/Service/MessageService.cs</url>\r\n          <line>68</line>\r\n          <properties documentPath=\"D:\\Message\\Back-End-Service\\Back-End-Service.Chat\\Service\\MessageService.cs\" initialLine=\"66\" containingFunctionPresentation=\"Method 'JoinChatRoom'\" />\r\n          <option name=\"timeStamp\" value=\"9\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Back-End-Service.Api/Controllers/MessageController.cs</url>\r\n          <line>53</line>\r\n          <properties documentPath=\"D:\\Message\\Back-End-Service\\Back-End-Service.Api\\Controllers\\MessageController.cs\" initialLine=\"53\" containingFunctionPresentation=\"Method 'GetChatRooms'\" />\r\n          <option name=\"timeStamp\" value=\"12\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"Type#System.Security.Claims.Claim\" memberName=\"Subject\" />\r\n        <PinnedItemInfo parentTag=\"Type#System.Security.Claims.ClaimsIdentity\" memberName=\"Claims\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.Back-End-Service/.idea/workspace.xml b/.idea/.idea.Back-End-Service/.idea/workspace.xml
--- a/.idea/.idea.Back-End-Service/.idea/workspace.xml	
+++ b/.idea/.idea.Back-End-Service/.idea/workspace.xml	
@@ -12,7 +12,59 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5dcf4656-5e63-4770-a730-1144d7f9780f" name="Changes" comment="Add funcional db Post,fix bag or MessageService.cs" />
+    <list default="true" id="5dcf4656-5e63-4770-a730-1144d7f9780f" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Api/Controllers/PostController.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/AddCommentModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/AddLikeModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/CreatePostModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/DeletePostModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/EditCommentModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/EditPostModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetCommentsByUserModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetCommentsModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetLikesByUserModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetLikesModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetPostModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetPostsByUserModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/GetRepostsModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/RemoveCommentModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/RemoveLikeModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Model/RepostPostModel.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Service/IPostService.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Back-End-Service.Post/Service/PostService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.idea.Back-End-Service/.idea/efCoreCommonOptions.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.idea.Back-End-Service/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.idea.Back-End-Service/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Api/Back-End-Service.Api.csproj" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Api/Back-End-Service.Api.csproj" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Api/Controllers/FriendController.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Api/Controllers/FriendController.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Api/Controllers/UserController.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Api/Controllers/UserController.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Api/ServiceCollectionExtensions.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Api/ServiceCollectionExtensions.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Api/UserProfile.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Api/UserProfile.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Models/AddFriends.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Models/AddFriendsModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Models/ConfirmFriendRequestAsync.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Models/ConfirmFriendRequestAsyncModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Models/GetFriends.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Models/GetFriendsModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Models/RemoveFriend.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Models/RemoveFriendModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Models/SendMessage.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Models/SendMessageModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Service/FriendService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Service/FriendService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Chat/Service/IFriendService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Chat/Service/IFriendService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Context/DateContext.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Context/DateContext.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Audio.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Audio.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Comment.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Comment.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/CommentLike.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/CommentLike.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Photo.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Photo.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Post.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Posts.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/PostLike.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/PostLike.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Repost.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Repost.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/User.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/User.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Video.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Entities/Video.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Models/ChangeEmail.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Models/ChangeEmailModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Models/ChangePassword.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Models/ChangePasswordModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Models/ChangeUserData.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Models/ChangeUserDataModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Models/SearchUser.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Models/SearchUserModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Models/SendChangeEmail.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Models/SendChangeEmailModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Service/IUserService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Service/IUserService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.Identity/Service/UserService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.Identity/Service/UserService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Back-End-Service.sln" beforeDir="false" afterPath="$PROJECT_DIR$/Back-End-Service.sln" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -35,28 +87,21 @@
     </option>
   </component>
   <component name="HighlightingSettingsPerFile">
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/108afe858165a89d9c44a73767f5520cca5eb89fd357279e999a7196377/ValueTuple.cs" root0="FORCE_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/2910ef137383b99848b2f64b9633ca2b0f798c19bb9291c734b636028b27d9/IReadOnlyEntityType.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/4edad4663e8ccb98f91581e67b1a8711fe263d78ffe6e7571d5eef7d959df/RuntimeEntityType.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/514db9918645d533daccb94eba3fb284294da1c4d4440abd0cf214f15dda490/EntityFinder.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/8fdca3c37271eed53182a48020b278215e8c99111db3cd3cf8d97bea25f6ca8/IEntityType.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/928523f08964492b10792127821f369a6464b88be5a48e8ce4aa6975f23538/Array.Enumerators.cs" root0="FORCE_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/981d65c7fbe528a515db85bcbb92fe19ea3641e6ccd184df299fbba0eff72630/AnyAll.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/aacc74311ca994f12b71cddb22241be9d6654c65e94f5985c5488dee396916f/DbContext.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/ade8489ce7ef65adf139b4b44c407b47103f4ab5b355e53c416211864e7f594/EntityFinderSource.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/b34cda9bf13421d0d691446062e86e73ba22b7a724d9d34a2425bb1cc627e1/SR.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/c6ad457575d35dcbff26c9a5e3fb1d92f1d3c55f25ef6ebf475367b5d8/List.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/df71358f7b7337a1eee3a65abe6d678dd9a065e256b8cc3fd44a2949754/Object.cs" root0="SKIP_HIGHLIGHTING" />
-    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/fd4b12b3b09eb75d541efd2e12445569c7a57d8dc3745453ff2aaa61df28b1e/Hub.cs" root0="SKIP_HIGHLIGHTING" />
     <setting file="file://$PROJECT_DIR$/Back-End-Service.Api/Controllers/UserController.cs" root0="FORCE_HIGHLIGHTING" />
     <setting file="file://$PROJECT_DIR$/Back-End-Service.Api/Program.cs" root0="FORCE_HIGHLIGHTING" />
     <setting file="file://$PROJECT_DIR$/Back-End-Service.Api/SeedData.cs" root0="FORCE_HIGHLIGHTING" />
     <setting file="file://$PROJECT_DIR$/Back-End-Service.Api/UserProfile.cs" root0="FORCE_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/Back-End-Service.Post/Model/CreatePostModel.cs" root0="FORCE_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/Back-End-Service.Post/Service/IPostService.cs" root0="FORCE_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/Back-End-Service.Post/Service/PostService.cs" root0="FORCE_HIGHLIGHTING" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
   <component name="MetaFilesCheckinStateConfiguration" checkMetaFiles="false" />
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="SWEA" />
+  </component>
   <component name="ProjectId" id="2Nm9YPlcEd8Ey1oyg4cCGYodrhg" />
   <component name="ProjectLevelVcsManager">
     <ConfirmationsSetting value="2" id="Add" />
@@ -157,9 +202,12 @@
       <workItem from="1681751622014" duration="1199000" />
       <workItem from="1681799458276" duration="3540000" />
       <workItem from="1681816242523" duration="5294000" />
-      <workItem from="1681893495467" duration="1973000" />
-      <workItem from="1681895996360" duration="4366000" />
-      <workItem from="1681973333956" duration="4066000" />
+      <workItem from="1681893495467" duration="8435000" />
+      <workItem from="1681978943564" duration="6152000" />
+      <workItem from="1681995695005" duration="239000" />
+      <workItem from="1681996219352" duration="2794000" />
+      <workItem from="1682003165312" duration="71000" />
+      <workItem from="1682063122124" duration="351000" />
     </task>
     <task id="LOCAL-00001" summary="Add joinRoom ,update DataBase">
       <created>1681217556272</created>
@@ -217,7 +265,21 @@
       <option name="project" value="LOCAL" />
       <updated>1681817761069</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="Add funcional db Post,fix bag or MessageService.cs">
+      <created>1681895503311</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1681895503311</updated>
+    </task>
+    <task id="LOCAL-00010" summary="Add AvatarModel , new logic FriendService.cs method  &quot; AddFriend&quot;">
+      <created>1681919689009</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1681919689009</updated>
+    </task>
+    <option name="localTasksCounter" value="11" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -253,14 +315,16 @@
     <MESSAGE value="Fix bag add FriendService.cs" />
     <MESSAGE value="Fix  FriendService.cs" />
     <MESSAGE value="add MessageService.cs new method" />
-    <option name="LAST_COMMIT_MESSAGE" value="add MessageService.cs new method" />
+    <MESSAGE value="Add funcional db Post,fix bag or MessageService.cs" />
+    <MESSAGE value="Add AvatarModel , new logic FriendService.cs method  &quot; AddFriend&quot;" />
+    <option name="LAST_COMMIT_MESSAGE" value="Add AvatarModel , new logic FriendService.cs method  &quot; AddFriend&quot;" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
       <breakpoints>
         <line-breakpoint enabled="true" type="DotNet Breakpoints">
           <url>file://$PROJECT_DIR$/Back-End-Service.Chat/Service/MessageService.cs</url>
-          <line>68</line>
+          <line>67</line>
           <properties documentPath="D:\Message\Back-End-Service\Back-End-Service.Chat\Service\MessageService.cs" initialLine="66" containingFunctionPresentation="Method 'JoinChatRoom'" />
           <option name="timeStamp" value="9" />
         </line-breakpoint>
